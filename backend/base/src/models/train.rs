//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "train")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub number: String,
    pub type_id: i32,
    pub default_line_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::dish::Entity")]
    Dish,
    #[sea_orm(has_many = "super::train_schedule::Entity")]
    TrainSchedule,
    #[sea_orm(
        belongs_to = "super::train_type::Entity",
        from = "Column::TypeId",
        to = "super::train_type::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    TrainType,
}

impl Related<super::dish::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dish.def()
    }
}

impl Related<super::train_schedule::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrainSchedule.def()
    }
}

impl Related<super::train_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrainType.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
