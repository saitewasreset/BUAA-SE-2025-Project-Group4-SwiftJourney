//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "seat_type")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub type_name: String,
    pub capacity: i32,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))")]
    pub price: Decimal,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::occupied_seat::Entity")]
    OccupiedSeat,
    #[sea_orm(has_many = "super::seat_type_in_train_type::Entity")]
    SeatTypeInTrainType,
    #[sea_orm(has_many = "super::seat_type_mapping::Entity")]
    SeatTypeMapping,
    #[sea_orm(has_many = "super::train_order::Entity")]
    TrainOrder,
}

impl Related<super::occupied_seat::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OccupiedSeat.def()
    }
}

impl Related<super::seat_type_in_train_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SeatTypeInTrainType.def()
    }
}

impl Related<super::seat_type_mapping::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SeatTypeMapping.def()
    }
}

impl Related<super::train_order::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrainOrder.def()
    }
}

impl Related<super::train_type::Entity> for Entity {
    fn to() -> RelationDef {
        super::seat_type_in_train_type::Relation::TrainType.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::seat_type_in_train_type::Relation::SeatType
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
