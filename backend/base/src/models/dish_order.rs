//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "dish_order")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub uuid: Uuid,
    pub train_order_id: i32,
    pub dish_id: i32,
    pub person_info_id: i32,
    pub pay_transaction_id: Option<i32>,
    pub refund_transaction_id: Option<i32>,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))")]
    pub price: Decimal,
    pub amount: i32,
    pub create_time: DateTimeWithTimeZone,
    pub active_time: DateTimeWithTimeZone,
    pub complete_time: DateTimeWithTimeZone,
    pub status: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::dish::Entity",
        from = "Column::DishId",
        to = "super::dish::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Dish,
    #[sea_orm(
        belongs_to = "super::person_info::Entity",
        from = "Column::PersonInfoId",
        to = "super::person_info::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    PersonInfo,
    #[sea_orm(
        belongs_to = "super::train_order::Entity",
        from = "Column::TrainOrderId",
        to = "super::train_order::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    TrainOrder,
    #[sea_orm(
        belongs_to = "super::transaction::Entity",
        from = "Column::PayTransactionId",
        to = "super::transaction::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Transaction2,
    #[sea_orm(
        belongs_to = "super::transaction::Entity",
        from = "Column::RefundTransactionId",
        to = "super::transaction::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Transaction1,
}

impl Related<super::dish::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dish.def()
    }
}

impl Related<super::person_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PersonInfo.def()
    }
}

impl Related<super::train_order::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrainOrder.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
