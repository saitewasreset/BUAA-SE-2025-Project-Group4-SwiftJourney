//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub username: String,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub hashed_password: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub hashed_payment_password: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub salt: Vec<u8>,
    pub wrong_payment_password_tried: i32,
    pub gender: String,
    pub age: i32,
    #[sea_orm(unique)]
    pub phone: String,
    pub email: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::hotel_rating::Entity")]
    HotelRating,
    #[sea_orm(has_many = "super::message::Entity")]
    Message,
    #[sea_orm(has_many = "super::person_info::Entity")]
    PersonInfo,
    #[sea_orm(has_many = "super::transaction::Entity")]
    Transaction,
}

impl Related<super::hotel_rating::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HotelRating.def()
    }
}

impl Related<super::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Message.def()
    }
}

impl Related<super::person_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PersonInfo.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
