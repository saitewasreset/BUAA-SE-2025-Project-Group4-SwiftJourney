//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "occupied_seat")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub train_id: i64,
    pub seat_type_id: i64,
    pub departure_date: Date,
    pub seat_id: i64,
    pub begin_station_id: i64,
    pub end_station_id: i64,
    pub person_info_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::person_info::Entity",
        from = "Column::PersonInfoId",
        to = "super::person_info::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    PersonInfo,
    #[sea_orm(
        belongs_to = "super::seat_type::Entity",
        from = "Column::SeatTypeId",
        to = "super::seat_type::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    SeatType,
    #[sea_orm(
        belongs_to = "super::station::Entity",
        from = "Column::BeginStationId",
        to = "super::station::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Station2,
    #[sea_orm(
        belongs_to = "super::station::Entity",
        from = "Column::EndStationId",
        to = "super::station::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Station1,
    #[sea_orm(
        belongs_to = "super::train::Entity",
        from = "Column::TrainId",
        to = "super::train::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Train,
}

impl Related<super::person_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PersonInfo.def()
    }
}

impl Related<super::seat_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SeatType.def()
    }
}

impl Related<super::train::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Train.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
