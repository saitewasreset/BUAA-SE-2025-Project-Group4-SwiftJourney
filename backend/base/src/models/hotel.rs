//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "hotel")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub city_id: i64,
    pub station_id: i64,
    pub address: String,
    pub phone: Json,
    pub images: Json,
    pub total_rating_count: i32,
    pub total_booking_count: i32,
    pub info: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::city::Entity",
        from = "Column::CityId",
        to = "super::city::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    City,
    #[sea_orm(has_many = "super::hotel_order::Entity")]
    HotelOrder,
    #[sea_orm(has_many = "super::hotel_rating::Entity")]
    HotelRating,
    #[sea_orm(has_many = "super::hotel_room_type::Entity")]
    HotelRoomType,
    #[sea_orm(has_many = "super::occupied_room::Entity")]
    OccupiedRoom,
    #[sea_orm(
        belongs_to = "super::station::Entity",
        from = "Column::StationId",
        to = "super::station::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Station,
}

impl Related<super::city::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::City.def()
    }
}

impl Related<super::hotel_order::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HotelOrder.def()
    }
}

impl Related<super::hotel_rating::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HotelRating.def()
    }
}

impl Related<super::hotel_room_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HotelRoomType.def()
    }
}

impl Related<super::occupied_room::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OccupiedRoom.def()
    }
}

impl Related<super::station::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Station.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
